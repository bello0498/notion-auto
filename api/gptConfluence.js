// ==========================
// üìò Confluence ÌéòÏù¥ÏßÄ Save API (Upsert: Create + Update)
// ==========================
//
// - Ï†úÎ™©(title)Í≥º Î≥∏Î¨∏(content)ÏùÑ Î∂ÑÎ¶¨ÌïòÏó¨ Î∞õÏùå
// - contentÏóê titleÏù¥ Ï§ëÎ≥µ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏùÑ Í≤ΩÏö∞ ÏûêÎèô Ï†úÍ±∞
// - ÏßÄÏ†ïÎêú spaceKey ÎÇ¥Ïóê ÌéòÏù¥ÏßÄ ÏÉùÏÑ±
// - (ÏÑ†ÌÉù) parentPageId ÎòêÎäî parentTitleÎ°ú ÌïòÏúÑ ÌéòÏù¥ÏßÄ ÏÉùÏÑ± Í∞ÄÎä•
// - scope="parent" ‚Üí ÏÉÅÏúÑ ÌéòÏù¥ÏßÄ ÏàòÏ†ï
// - scope="child"  ‚Üí ÌïòÏúÑ ÌéòÏù¥ÏßÄ Ï§ë title ÏùºÏπòÌïòÎäî Í≤É ÏàòÏ†ï
// - ÎèôÏùº Ï†úÎ™© ÌéòÏù¥ÏßÄ Ï°¥Ïû¨ Ïãú update, ÏóÜÏúºÎ©¥ create
//

const fetch = require("node-fetch");

// ==========================
// üì• ÏöîÏ≤≠ Î∞îÎîî JSON ÌååÏã± Ìï®Ïàò
// ==========================
async function readJSON(req) {
  if (req.body && typeof req.body === "object") return req.body;
  const chunks = [];
  for await (const c of req) chunks.push(c);
  try {
    return JSON.parse(Buffer.concat(chunks).toString("utf8") || "{}");
  } catch {
    return {};
  }
}

// ==========================
// üîß /wiki Í≤ΩÎ°ú Î≥¥Ï†ï Ï≤òÎ¶¨
// ==========================
function normalizeWikiDomain(domain) {
  if (!domain) return "";
  const base = domain.replace(/\/+\$/, "");
  return base.endsWith("/wiki") ? base : base + "/wiki";
}

// ==========================
// üîß contentÏóê Ìè¨Ìï®Îêú Ï†úÎ™© Ï†úÍ±∞ Ï≤òÎ¶¨
// ==========================
function removeTitleFromContent(title, content) {
  if (!content) return "";
  const lines = content.split("\n").map((line) => line.trim());
  const firstLine = lines[0].replace(/^#+\s*|<h[1-6]>|<\/h[1-6]>/gi, "").trim();
  return firstLine === title.trim() ? lines.slice(1).join("\n").trim() : content;
}

// ==========================
// üîç parentTitleÎ°ú Confluence ÌéòÏù¥ÏßÄ ID Í≤ÄÏÉâ
// ==========================
async function getParentPageIdFromTitle(title, wikiBase, email, token, spaceKey) {
  const query = encodeURIComponent(`type=page AND space="${spaceKey}" AND title="${title}"`);
  const url = `${wikiBase}/rest/api/content/search?cql=${query}`;

  const res = await fetch(url, {
    headers: {
      Authorization: "Basic " + Buffer.from(`${email}:${token}`).toString("base64"),
      Accept: "application/json",
    },
  });

  const data = await res.json();
  const page = data.results?.[0];
  return page?.id || null;
}

// ==========================
// üîç Ï†úÎ™©ÏúºÎ°ú Confluence ÌéòÏù¥ÏßÄ Í≤ÄÏÉâ (Ï†ïÌôï Îß§Ïπ≠)
// ==========================
async function findPageByTitle(title, wikiBase, email, token, spaceKey) {
  const query = encodeURIComponent(`type=page AND space="${spaceKey}" AND title="${title}"`);
  const url = `${wikiBase}/rest/api/content/search?cql=${query}`;

  const res = await fetch(url, {
    headers: {
      Authorization: "Basic " + Buffer.from(`${email}:${token}`).toString("base64"),
      Accept: "application/json",
    },
  });

  const data = await res.json();
  return data.results?.[0] || null;
}

// ==========================
// üîç ÌïòÏúÑ ÌéòÏù¥ÏßÄ Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
// ==========================
async function getChildPages(parentId, wikiBase, email, token) {
  const url = `${wikiBase}/rest/api/content/${parentId}/child/page?limit=50`;

  const res = await fetch(url, {
    headers: {
      Authorization: "Basic " + Buffer.from(`${email}:${token}`).toString("base64"),
      Accept: "application/json",
    },
  });

  const data = await res.json();
  return data.results || [];
}

// ==========================
// ‚úÖ Î©îÏù∏ API ÏóîÎìúÌè¨Ïù∏Ìä∏
// ==========================
module.exports = async (req, res) => {
  // üìã Í≥µÌÜµ ÏùëÎãµ Ìó§Îçî
  res.setHeader("Content-Type", "application/json; charset=utf-8");
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization, Accept-Charset");
  if (req.method === "OPTIONS") return res.status(200).end();
  if (req.method !== "POST") return res.status(405).json({ error: "Only POST allowed" });

  // üîê ÌôòÍ≤Ω Î≥ÄÏàò
  const {
    CONFLUENCE_EMAIL,
    CONFLUENCE_API_TOKEN,
    CONFLUENCE_DOMAIN,
    CONFLUENCE_SPACE_KEY,
    CONFLUENCE_PARENT_PAGE_ID,
  } = process.env;

  if (!CONFLUENCE_EMAIL || !CONFLUENCE_API_TOKEN || !CONFLUENCE_DOMAIN) {
    return res.status(500).json({ error: "Missing Confluence env vars" });
  }
  if (!CONFLUENCE_SPACE_KEY) {
    return res.status(500).json({ error: "Missing CONFLUENCE_SPACE_KEY (spaceKey required)" });
  }

  const wikiBase = normalizeWikiDomain(CONFLUENCE_DOMAIN);
  const endpoint = `${wikiBase}/rest/api/content`;

  try {
    // üì¶ ÏöîÏ≤≠ Î∞îÎîî
    const body = await readJSON(req);
    const {
      title,
      content,
      parentPageId: bodyParentPageId,
      parentTitle,
      scope = "parent", // Í∏∞Î≥∏ parent ÏàòÏ†ï
      childTitle,
    } = body || {};

    // üìõ Ï†úÎ™© ÌïÑÏàò
    const safeTitle = (title || "").toString().trim();
    if (!safeTitle) {
      return res.status(400).json({ error: "Missing 'title'" });
    }

    // üßπ content Ï†ïÎ¶¨ (ÌÉÄÏù¥ÌãÄ Ï§ëÎ≥µ Ï†úÍ±∞)
    const cleanedContent = removeTitleFromContent(safeTitle, content);

    // üîç Î∂ÄÎ™® ID Ï≤òÎ¶¨
    let parentPageId = (bodyParentPageId || CONFLUENCE_PARENT_PAGE_ID || "").toString().trim();
    if (!parentPageId && parentTitle) {
      parentPageId = await getParentPageIdFromTitle(
        parentTitle,
        wikiBase,
        CONFLUENCE_EMAIL,
        CONFLUENCE_API_TOKEN,
        CONFLUENCE_SPACE_KEY
      );
    }

    // ==========================
    // ‚úèÔ∏è Upsert Î°úÏßÅ
    // ==========================
    let targetPage = await findPageByTitle(safeTitle, wikiBase, CONFLUENCE_EMAIL, CONFLUENCE_API_TOKEN, CONFLUENCE_SPACE_KEY);

    if (scope === "child" && parentPageId && childTitle) {
      // üîç child ÏàòÏ†ï Î™®Îìú
      const children = await getChildPages(parentPageId, wikiBase, CONFLUENCE_EMAIL, CONFLUENCE_API_TOKEN);
      targetPage = children.find(c => c.title === childTitle);
    }

    if (targetPage) {
      // Í∏∞Ï°¥ ÌéòÏù¥ÏßÄ ÏûàÏúºÎ©¥ UPDATE
      const updateUrl = `${wikiBase}/rest/api/content/${targetPage.id}`;
      const response = await fetch(updateUrl, {
        method: "PUT",
        headers: {
          Authorization: "Basic " + Buffer.from(`${CONFLUENCE_EMAIL}:${CONFLUENCE_API_TOKEN}`).toString("base64"),
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: JSON.stringify({
          id: targetPage.id,
          type: "page",
          title: scope === "child" ? childTitle : safeTitle,
          space: { key: CONFLUENCE_SPACE_KEY },
          body: {
            storage: {
              value: cleanedContent || "<p>Empty content</p>",
              representation: "storage",
            },
          },
          version: { number: (targetPage.version?.number || 0) + 1 },
        }),
      });

      const data = await response.json();
      if (!response.ok) {
        return res.status(response.status).json({ error: "Failed to update Confluence", detail: data });
      }

      const pageUrl = `${wikiBase.replace(/\/wiki$/, "")}${data._links.webui}`;
      return res.status(200).json({ ok: true, updated: true, id: data.id, links: { webui: pageUrl } });
    } else {
      // ÏóÜÏúºÎ©¥ CREATE
      const payload = {
        type: "page",
        title: safeTitle,
        space: { key: CONFLUENCE_SPACE_KEY },
        ...(parentPageId ? { ancestors: [{ id: parentPageId }] } : {}),
        body: {
          storage: {
            value: cleanedContent || "<p>Empty content</p>",
            representation: "storage",
          },
        },
      };

      const response = await fetch(endpoint, {
        method: "POST",
        headers: {
          Authorization: "Basic " + Buffer.from(`${CONFLUENCE_EMAIL}:${CONFLUENCE_API_TOKEN}`).toString("base64"),
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      const data = await response.json();
      if (!response.ok) {
        return res.status(response.status).json({ error: "Failed to create Confluence page", detail: data });
      }

      const pageUrl = `${wikiBase.replace(/\/wiki$/, "")}${data._links.webui}`;
      return res.status(200).json({ ok: true, updated: false, id: data.id, links: { webui: pageUrl } });
    }
  } catch (err) {
    console.error("Confluence Save/Update API error:", err);
    return res.status(500).json({ error: "Unexpected server error", detail: err.message });
  }
};
